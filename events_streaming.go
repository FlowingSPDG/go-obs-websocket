// Code generated by protocol.py DO NOT EDIT
// Generator can be found at https://github.com/FlowingSPDG/go-obs-websocket/blob/master/codegen/protocol.py

package obsws

// StreamStartingEvent : A request to start streaming has been issued.
//
// Since obs-websocket version: 0.3.
//
// https://github.com/Palakis/obs-websocket/blob/4.x-current/docs/generated/protocol.md#streamstarting
type StreamStartingEvent struct {
	// Always false (retrocompatibility).
	// Required: Yes.
	PreviewOnly bool `json:"preview-only,omitempty"`
	_event      `json:",squash"`
}

// StreamStartedEvent : Streaming started successfully.
//
// Since obs-websocket version: 0.3.
//
// https://github.com/Palakis/obs-websocket/blob/4.x-current/docs/generated/protocol.md#streamstarted
type StreamStartedEvent struct {
	_event `json:",squash"`
}

// StreamStoppingEvent : A request to stop streaming has been issued.
//
// Since obs-websocket version: 0.3.
//
// https://github.com/Palakis/obs-websocket/blob/4.x-current/docs/generated/protocol.md#streamstopping
type StreamStoppingEvent struct {
	// Always false (retrocompatibility).
	// Required: Yes.
	PreviewOnly bool `json:"preview-only,omitempty"`
	_event      `json:",squash"`
}

// StreamStoppedEvent : Streaming stopped successfully.
//
// Since obs-websocket version: 0.3.
//
// https://github.com/Palakis/obs-websocket/blob/4.x-current/docs/generated/protocol.md#streamstopped
type StreamStoppedEvent struct {
	_event `json:",squash"`
}

// StreamStatusEvent : Emitted every 2 seconds when stream is active.
//
// Since obs-websocket version: 0.3.
//
// https://github.com/Palakis/obs-websocket/blob/4.x-current/docs/generated/protocol.md#streamstatus
type StreamStatusEvent struct {
	// Current streaming state.
	// Required: Yes.
	Streaming bool `json:"streaming,omitempty"`
	// Current recording state.
	// Required: Yes.
	Recording bool `json:"recording,omitempty"`
	// Replay Buffer status.
	// Required: Yes.
	ReplayBufferActive bool `json:"replay-buffer-active,omitempty"`
	// Amount of data per second (in bytes) transmitted by the stream encoder.
	// Required: Yes.
	BytesPerSec int `json:"bytes-per-sec,omitempty"`
	// Amount of data per second (in kilobits) transmitted by the stream encoder.
	// Required: Yes.
	KbitsPerSec int `json:"kbits-per-sec,omitempty"`
	// Percentage of dropped frames.
	// Required: Yes.
	Strain float64 `json:"strain,omitempty"`
	// Total time (in seconds) since the stream started.
	// Required: Yes.
	TotalStreamTime int `json:"total-stream-time,omitempty"`
	// Total number of frames transmitted since the stream started.
	// Required: Yes.
	NumTotalFrames int `json:"num-total-frames,omitempty"`
	// Number of frames dropped by the encoder since the stream started.
	// Required: Yes.
	NumDroppedFrames int `json:"num-dropped-frames,omitempty"`
	// Current framerate.
	// Required: Yes.
	FPS float64 `json:"fps,omitempty"`
	// Number of frames rendered.
	// Required: Yes.
	RenderTotalFrames int `json:"render-total-frames,omitempty"`
	// Number of frames missed due to rendering lag.
	// Required: Yes.
	RenderMissedFrames int `json:"render-missed-frames,omitempty"`
	// Number of frames outputted.
	// Required: Yes.
	OutputTotalFrames int `json:"output-total-frames,omitempty"`
	// Number of frames skipped due to encoding lag.
	// Required: Yes.
	OutputSkippedFrames int `json:"output-skipped-frames,omitempty"`
	// Average frame time (in milliseconds).
	// Required: Yes.
	AverageFrameTime float64 `json:"average-frame-time,omitempty"`
	// Current CPU usage (percentage).
	// Required: Yes.
	CpuUsage float64 `json:"cpu-usage,omitempty"`
	// Current RAM usage (in megabytes).
	// Required: Yes.
	MemoryUsage float64 `json:"memory-usage,omitempty"`
	// Free recording disk space (in megabytes).
	// Required: Yes.
	FreeDiskSpace float64 `json:"free-disk-space,omitempty"`
	// Always false (retrocompatibility).
	// Required: Yes.
	PreviewOnly bool `json:"preview-only,omitempty"`
	_event      `json:",squash"`
}
